/*
 * Copyright (c) 2017 kjtech.de - All Rights Reserved.
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential.
 */

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'javafx-gradle-plugin'
// include project gradle (e.g. 'formatVersionCode')
apply from: '../build.gradle'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile project(":lib")

    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.8.0-alpha2'

    // https://mvnrepository.com/artifact/net.sf.jxls/jxls-core
    compile group: 'net.sf.jxls', name: 'jxls-core', version: '1.0.6'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    // https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-jexl
    compile group: 'org.apache.commons', name: 'commons-jexl', version: '2.1.1'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-alpha2'
    // https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.8.0-alpha2'

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    compile group: 'org.jsoup', name: 'jsoup', version: '1.8.3'

}

sourceSets.main {
    java {
        srcDir 'src/main/java'
    }
    resources {
        srcDirs = ['src/main/java', 'src/main/resources']
        exclude "**/*.java"
    }
}

int version = 1

task archive(type: Zip) {
    println "zipping " + "${project.name}-" + formatVersionCode(version)
    archiveName = "${project.name}-" + formatVersionCode(version) + ".zip"
    destinationDir = file('build/archive')
    from 'build/jfx/app'
    exclude "*.zip"
    includeEmptyDirs = false
}
jfxJar.finalizedBy(archive)

jfx {
    verbose = true
    mainClass = "io.celox.MainMobile"
    jfxAppOutputDir = "build/jfx/app"
    jfxMainAppJarName = "MyServer-Mobile-" + formatVersionCode(version) + ".jar"
    deployDir = "src/main/deploy"
    useEnvironmentRelativeExecutables = true
    libFolderName = "lib"

    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = false
    skipCopyingDependencies = false
    useLibFolderContentForManifestClasspath = false
    fixedManifestClasspath = null

    // gradle jfxNative
    identifier = null
    // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "celox"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL"
    // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = "0.0.1"
    needShortcut = false
    needMenu = false
    bundleArguments = [
            // dont bundle JRE (not recommended, but increases build-size/-speed)
            runtime: null
    ]
    appName = "MyServer Mobile"
    // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
    additionalBundlerResources = null
    // path to some additional resources for the bundlers when creating application-bundle
    additionalAppResources = null
    // path to some additional resources when creating application-bundle
    secondaryLaunchers = [[appName: "somethingDifferent"], [appName: "somethingDifferent2"]]
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
    customBundlers = null // List<String>
    failOnError = false
    onlyCustomBundlers = false
    skipJNLP = false
    skipNativeVersionNumberSanitizing = false // anything than numbers or dots are removed
    additionalJarsignerParameters = null // List<String>
    skipMainClassScanning = false // set to true might increase build-speed

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipNativeLauncherWorkaround205 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false
    skipMacBundlerWorkaround = false

    // gradle jfxRun
    runJavaParameter = null // String
    runAppParameter = null // String

    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
    alternativePathToJarFile = null // String

    // to disable patching of ant-javafx.jar, set this to false
    usePatchedJFXAntLib = true

    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}